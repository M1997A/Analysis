// <auto-generated />
using System;
using Analysis.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Analysis.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190316012230_forth")]
    partial class forth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Analysis.Models.AnalysisFeatures", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AnalysisTypeId");

                    b.Property<string>("MeasruingUnit");

                    b.Property<string>("Name");

                    b.Property<string>("NormalRange");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisTypeId");

                    b.ToTable("AnalysisFeatures");
                });

            modelBuilder.Entity("Analysis.Models.AnalysisType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Duration");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Precautions");

                    b.Property<decimal>("Price");

                    b.Property<string>("SampleType")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AnalysisType");
                });

            modelBuilder.Entity("Analysis.Models.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("Age");

                    b.Property<string>("Diseases");

                    b.Property<string>("Doctor");

                    b.Property<string>("Gender");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Analysis.Models.ClientAnalysis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AnalysisTypeId");

                    b.Property<long>("ClientId");

                    b.Property<bool>("Finished");

                    b.Property<DateTime>("RecievedDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisTypeId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientAnalysis");
                });

            modelBuilder.Entity("Analysis.Models.Results", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AnalysisFeaturesId");

                    b.Property<long>("ClientAnalysisId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisFeaturesId");

                    b.HasIndex("ClientAnalysisId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Analysis.Models.AnalysisFeatures", b =>
                {
                    b.HasOne("Analysis.Models.AnalysisType", "AnalysisType")
                        .WithMany()
                        .HasForeignKey("AnalysisTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Analysis.Models.ClientAnalysis", b =>
                {
                    b.HasOne("Analysis.Models.AnalysisType", "AnalysisType")
                        .WithMany()
                        .HasForeignKey("AnalysisTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Analysis.Models.Client", "Client")
                        .WithMany("ClientAnalysis")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Analysis.Models.Results", b =>
                {
                    b.HasOne("Analysis.Models.AnalysisFeatures", "AnalysisFeatures")
                        .WithMany()
                        .HasForeignKey("AnalysisFeaturesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Analysis.Models.ClientAnalysis", "ClientAnalysis")
                        .WithMany()
                        .HasForeignKey("ClientAnalysisId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
